// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: src/api/shortener.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShortnerClient is the client API for Shortner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortnerClient interface {
	// Creates new shortened URL
	CreateNew(ctx context.Context, in *LongURL, opts ...grpc.CallOption) (*ShortURL, error)
	// Returns associated short URL with given URL
	GetAssociated(ctx context.Context, in *ShortURL, opts ...grpc.CallOption) (*LongURL, error)
}

type shortnerClient struct {
	cc grpc.ClientConnInterface
}

func NewShortnerClient(cc grpc.ClientConnInterface) ShortnerClient {
	return &shortnerClient{cc}
}

func (c *shortnerClient) CreateNew(ctx context.Context, in *LongURL, opts ...grpc.CallOption) (*ShortURL, error) {
	out := new(ShortURL)
	err := c.cc.Invoke(ctx, "/Shortner/CreateNew", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortnerClient) GetAssociated(ctx context.Context, in *ShortURL, opts ...grpc.CallOption) (*LongURL, error) {
	out := new(LongURL)
	err := c.cc.Invoke(ctx, "/Shortner/GetAssociated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortnerServer is the server API for Shortner service.
// All implementations must embed UnimplementedShortnerServer
// for forward compatibility
type ShortnerServer interface {
	// Creates new shortened URL
	CreateNew(context.Context, *LongURL) (*ShortURL, error)
	// Returns associated short URL with given URL
	GetAssociated(context.Context, *ShortURL) (*LongURL, error)
	mustEmbedUnimplementedShortnerServer()
}

// UnimplementedShortnerServer must be embedded to have forward compatible implementations.
type UnimplementedShortnerServer struct {
}

func (UnimplementedShortnerServer) CreateNew(context.Context, *LongURL) (*ShortURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNew not implemented")
}
func (UnimplementedShortnerServer) GetAssociated(context.Context, *ShortURL) (*LongURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssociated not implemented")
}
func (UnimplementedShortnerServer) mustEmbedUnimplementedShortnerServer() {}

// UnsafeShortnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortnerServer will
// result in compilation errors.
type UnsafeShortnerServer interface {
	mustEmbedUnimplementedShortnerServer()
}

func RegisterShortnerServer(s grpc.ServiceRegistrar, srv ShortnerServer) {
	s.RegisterService(&Shortner_ServiceDesc, srv)
}

func _Shortner_CreateNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LongURL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortnerServer).CreateNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Shortner/CreateNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortnerServer).CreateNew(ctx, req.(*LongURL))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortner_GetAssociated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortURL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortnerServer).GetAssociated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Shortner/GetAssociated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortnerServer).GetAssociated(ctx, req.(*ShortURL))
	}
	return interceptor(ctx, in, info, handler)
}

// Shortner_ServiceDesc is the grpc.ServiceDesc for Shortner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shortner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Shortner",
	HandlerType: (*ShortnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNew",
			Handler:    _Shortner_CreateNew_Handler,
		},
		{
			MethodName: "GetAssociated",
			Handler:    _Shortner_GetAssociated_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/api/shortener.proto",
}
